# Copyright 2023

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.1'
services:

    nginx:
        # This is the default approach, uses certbot generated certificates, and auto-renews
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.certbot
        image: nginxcertbot
        container_name: nginx
        depends_on:
            - flask
        volumes:
            - /etc/letsencrypt:/etc/letsencrypt
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
            - ./static:/etc/nginx/html
        entrypoint: "/bin/sh -c 'while :; do certbot renew; sleep 12h & wait $${!}; done & nginx -g \"daemon off;\"'"
        ports:
            - "80:80"
            - "443:443"
        networks:
            - my-network

    # nginx:
    #     # Use this alternative setup if using self-signed certificates
    #     restart: always
    #     image: nginx:1.13.7
    #     container_name: nginx
    #     depends_on:
    #         - flask
    #     volumes:
    #         - ./nginx.conf:/etc/nginx/conf.d/default.conf
    #         - ./static:/etc/nginx/html
    #         - ./certs:/etc/nginx/certs
    #     networks:
    #         - my-network
    #     ports:
    #         - "80:80"
    #         - "443:443"

    flask:
        # Main Flask app
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.flask
        image: traptagger:1.0.1
        container_name: flask
        depends_on:
            - traptagger_redis
        volumes:
            - ./:/code/
            - ./wildbook-ia/wbia:/code/wbia
        environment:
            - FLASK_APP=/code/TrapTagger.py
            - GUNICORN_CMD_ARGS="--threads=3"
            - REDIS_IP=traptagger_redis
            - DATABASE_NAME=${DATABASE_NAME}
            - HOST_IP=${HOST_IP}
            - DNS=${DNS}
            - DATABASE_SERVER=${DATABASE_SERVER}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - REGION_NAME=${REGION_NAME}
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - BRANCH=${BRANCH}
            - SG_ID=${SG_ID}
            - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
            - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
            - TOKEN=${TOKEN}
            - PARALLEL_AMI=${PARALLEL_AMI}
            - KEY_NAME=${KEY_NAME}
            - QUEUE=${QUEUE}
            - WORKER_NAME=${WORKER_NAME}
            - MAIN_GIT_REPO=${MAIN_GIT_REPO}
            - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
            - BUCKET=${BUCKET}
            - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
            - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
            - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
            - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
            - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
            - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
        command: gunicorn -b 0.0.0.0:8000 -w 1 -k gthread app:app
        networks:
            my-network:
                aliases:
                    - flask-app
        ports:
            - "8000:8000"

    fileHandler:
        # handles upload/download queries
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.flask
        image: traptagger:1.0.1
        container_name: fileHandler
        depends_on:
            - flask
        volumes:
            - ./:/code/
            - ./wildbook-ia/wbia:/code/wbia
        environment:
            - FLASK_APP=/code/TrapTagger.py
            - GUNICORN_CMD_ARGS="--threads=1"
            - REDIS_IP=traptagger_redis
            - DATABASE_NAME=${DATABASE_NAME}
            - HOST_IP=${HOST_IP}
            - DNS=${DNS}
            - DATABASE_SERVER=${DATABASE_SERVER}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - REGION_NAME=${REGION_NAME}
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - BRANCH=${BRANCH}
            - SG_ID=${SG_ID}
            - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
            - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
            - TOKEN=${TOKEN}
            - PARALLEL_AMI=${PARALLEL_AMI}
            - KEY_NAME=${KEY_NAME}
            - QUEUE=${QUEUE}
            - WORKER_NAME=${WORKER_NAME}
            - MAIN_GIT_REPO=${MAIN_GIT_REPO}
            - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
            - BUCKET=${BUCKET}
            - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
            - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
            - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
            - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
            - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
            - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
        command: gunicorn -b 0.0.0.0:8000 -w 1 -k gthread app:app
        networks:
            my-network:
                aliases:
                    - fileHandler
        ports:
            - "7000:8000"

    priority_worker:
        # Priority celery worker
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.flask
        image: traptagger:1.0.1
        container_name: priority_worker
        volumes:
            - ./:/code/
            - ./wildbook-ia/wbia:/code/wbia
        environment:
            - PYTHONPATH=/code
            - FLASK_APP=/code/TrapTagger.py
            - REDIS_IP=traptagger_redis
            - DATABASE_NAME=${DATABASE_NAME}
            - HOST_IP=${HOST_IP}
            - DNS=${DNS}
            - DATABASE_SERVER=${DATABASE_SERVER}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - REGION_NAME=${REGION_NAME}
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - BRANCH=${BRANCH}
            - SG_ID=${SG_ID}
            - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
            - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
            - TOKEN=${TOKEN}
            - PARALLEL_AMI=${PARALLEL_AMI}
            - KEY_NAME=${KEY_NAME}
            - QUEUE=${QUEUE}
            - WORKER_NAME=${WORKER_NAME}
            - MAIN_GIT_REPO=${MAIN_GIT_REPO}
            - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
            - BUCKET=${BUCKET}
            - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
            - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
            - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
            - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
            - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
            - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
        command: celery -A app.celery worker -B -E -n priority_worker -Q priority -Ofair --concurrency=1 --loglevel=info
        networks:
            - my-network

    ram_worker:
        # worker that takes advantage of the greater amount of RAM on the server
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.flask
        image: traptagger:1.0.1
        container_name: ram_worker
        volumes:
            - ./:/code/
            - ./wildbook-ia/wbia:/code/wbia
        environment:
            - PYTHONPATH=/code
            - FLASK_APP=/code/TrapTagger.py
            - REDIS_IP=traptagger_redis
            - DATABASE_NAME=${DATABASE_NAME}
            - HOST_IP=${HOST_IP}
            - DNS=${DNS}
            - DATABASE_SERVER=${DATABASE_SERVER}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - REGION_NAME=${REGION_NAME}
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - BRANCH=${BRANCH}
            - SG_ID=${SG_ID}
            - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
            - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
            - TOKEN=${TOKEN}
            - PARALLEL_AMI=${PARALLEL_AMI}
            - KEY_NAME=${KEY_NAME}
            - QUEUE=${QUEUE}
            - WORKER_NAME=${WORKER_NAME}
            - MAIN_GIT_REPO=${MAIN_GIT_REPO}
            - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
            - BUCKET=${BUCKET}
            - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
            - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
            - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
            - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
            - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
            - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
        command: nice -10 celery -A app.celery worker -E -n ram_worker -Q ram_intensive -Ofair --concurrency=1 --loglevel=info
        networks:
            - my-network

    traptagger_worker1:
        # Celery worker
        restart: always
        build:
            context: ./
            dockerfile: Dockerfile.flask
        image: traptagger:1.0.1
        container_name: traptagger_worker1
        volumes:
            - ./:/code/
            - ./wildbook-ia/wbia:/code/wbia
        environment:
            - PYTHONPATH=/code
            - FLASK_APP=/code/TrapTagger.py
            - REDIS_IP=traptagger_redis
            - DATABASE_NAME=${DATABASE_NAME}
            - HOST_IP=${HOST_IP}
            - DNS=${DNS}
            - DATABASE_SERVER=${DATABASE_SERVER}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - REGION_NAME=${REGION_NAME}
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - BRANCH=${BRANCH}
            - SG_ID=${SG_ID}
            - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
            - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
            - TOKEN=${TOKEN}
            - PARALLEL_AMI=${PARALLEL_AMI}
            - KEY_NAME=${KEY_NAME}
            - QUEUE=${QUEUE}
            - WORKER_NAME=${WORKER_NAME}
            - MAIN_GIT_REPO=${MAIN_GIT_REPO}
            - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
            - BUCKET=${BUCKET}
            - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
            - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
            - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
            - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
            - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
            - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
        command: nice -10 celery -A app.celery worker -E -n traptagger_worker1 -Q default -Ofair --concurrency=1 --loglevel=info
        networks:
            - my-network

    # traptagger_worker2:
    #     # Celery worker
    #     restart: always
    #     build:
    #         context: ./
    #         dockerfile: Dockerfile.flask
    #     image: traptagger:1.0.1
    #     container_name: traptagger_worker2
    #     volumes:
    #         - ./:/code/
    #         - ./wildbook-ia/wbia:/code/wbia
    #     environment:
    #         - PYTHONPATH=/code
    #         - FLASK_APP=/code/TrapTagger.py
    #         - REDIS_IP=traptagger_redis
    #         - DATABASE_NAME=${DATABASE_NAME}
    #         - HOST_IP=${HOST_IP}
    #         - DNS=${DNS}
    #         - DATABASE_SERVER=${DATABASE_SERVER}
    #         - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    #         - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    #         - REGION_NAME=${REGION_NAME}
    #         - SECRET_KEY=${SECRET_KEY}
    #         - MAIL_USERNAME=${MAIL_USERNAME}
    #         - MAIL_PASSWORD=${MAIL_PASSWORD}
    #         - BRANCH=${BRANCH}
    #         - SG_ID=${SG_ID}
    #         - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
    #         - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
    #         - TOKEN=${TOKEN}
    #         - PARALLEL_AMI=${PARALLEL_AMI}
    #         - KEY_NAME=${KEY_NAME}
    #         - QUEUE=${QUEUE}
    #         - WORKER_NAME=${WORKER_NAME}
    #         - MAIN_GIT_REPO=${MAIN_GIT_REPO}
    #         - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
    #         - BUCKET=${BUCKET}
    #         - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
    #         - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
    #         - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
    #         - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
    #         - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
    #         - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
    #     command: nice -10 celery -A app.celery worker -E -n traptagger_worker2 -Q default -Ofair --concurrency=1 --loglevel=info
    #     networks:
    #         - my-network

    # traptagger_worker3:
    #     # Celery worker
    #     restart: always
    #     build:
    #         context: ./
    #         dockerfile: Dockerfile.flask
    #     image: traptagger:1.0.1
    #     container_name: traptagger_worker3
    #     volumes:
    #         - ./:/code/
    #         - ./wildbook-ia/wbia:/code/wbia
    #     environment:
    #         - PYTHONPATH=/code
    #         - FLASK_APP=/code/TrapTagger.py
    #         - REDIS_IP=traptagger_redis
    #         - DATABASE_NAME=${DATABASE_NAME}
    #         - HOST_IP=${HOST_IP}
    #         - DNS=${DNS}
    #         - DATABASE_SERVER=${DATABASE_SERVER}
    #         - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    #         - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    #         - REGION_NAME=${REGION_NAME}
    #         - SECRET_KEY=${SECRET_KEY}
    #         - MAIL_USERNAME=${MAIL_USERNAME}
    #         - MAIL_PASSWORD=${MAIL_PASSWORD}
    #         - BRANCH=${BRANCH}
    #         - SG_ID=${SG_ID}
    #         - PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}
    #         - PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}
    #         - TOKEN=${TOKEN}
    #         - PARALLEL_AMI=${PARALLEL_AMI}
    #         - KEY_NAME=${KEY_NAME}
    #         - QUEUE=${QUEUE}
    #         - WORKER_NAME=${WORKER_NAME}
    #         - MAIN_GIT_REPO=${MAIN_GIT_REPO}
    #         - MONITORED_EMAIL_ADDRESS=${MONITORED_EMAIL_ADDRESS}
    #         - BUCKET=${BUCKET}
    #         - DB_CLUSTER_NAME=${DB_CLUSTER_NAME}
    #         - IAM_ADMIN_GROUP=${IAM_ADMIN_GROUP}
    #         - AWS_S3_DOWNLOAD_ACCESS_KEY_ID=${AWS_S3_DOWNLOAD_ACCESS_KEY_ID}
    #         - AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY=${AWS_S3_DOWNLOAD_SECRET_ACCESS_KEY}
    #         - AWS_S3_UPLOAD_ACCESS_KEY_ID=${AWS_S3_UPLOAD_ACCESS_KEY_ID}
    #         - AWS_S3_UPLOAD_SECRET_ACCESS_KEY=${AWS_S3_UPLOAD_SECRET_ACCESS_KEY}
    #     command: nice -10 celery -A app.celery worker -E -n traptagger_worker3 -Q default -Ofair --concurrency=1 --loglevel=info
    #     networks:
    #         - my-network

    traptagger_redis:
        # Redis server
        restart: always
        image : redis:latest       
        container_name: traptagger_redis
        volumes:
            - ./:/data/
        ports : 
            - "6379:6379"
        command: redis-server redis.conf
        networks:
            - my-network

    # traptagger_endpoint:
    #     # Species-identifier API
    #     restart: always
    #     build:
    #         context: ./
    #         dockerfile: gpuworker/Dockerfile
    #     image: gpu_worker
    #     container_name: traptagger_endpoint
    #     volumes:
    #         - ./gpuworker:/code/gpuworker 
    #         - ./CameraTraps/detection:/code/CameraTraps/detection 
    #         - ./CameraTraps/data_management:/code/CameraTraps/data_management 
    #         - ./CameraTraps/visualization:/code/CameraTraps/visualization 
    #         - ./CameraTraps/ct_utils.py:/code/CameraTraps/ct_utils.py 
    #     environment:
    #         - CUDA_VISIBLE_DEVICES=0
    #         - REDIS_IP=traptagger_redis
    #     command: celery -A gpuworker.worker worker -n traptagger_endpoint -Q local -Ofair --concurrency=1 -l info
    #     networks:
    #         - my-network

networks:
    my-network:
